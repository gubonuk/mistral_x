import os
import time
import json
import base64
from datetime import datetime
from mistralai import Mistral

# API 키 설정
api_key = "KaX4MNzCzeFKs9jjnIdQjhAj0aaSw0xq"  # 환경 변수에서 가져오거나 안전하게 관리하세요
client = Mistral(api_key=api_key)


# OCR 처리 함수
def process_document(file_path, include_images=True):
    """
    문서를 OCR로 처리하여 텍스트와 이미지를 추출

    Args:
        file_path: 문서 파일 경로 (PDF 또는 이미지)
        include_images: 이미지 포함 여부

    Returns:
        dict: OCR 처리 결과
    """
    print(f"문서 처리 중: {file_path}")
    start_time = time.time()

    # 파일 업로드
    with open(file_path, "rb") as file:
        uploaded_file = client.files.upload(
            file={
                "file_name": os.path.basename(file_path),
                "content": file,
            },
            purpose="ocr"
        )

    print(f"파일 업로드 완료. 파일 ID: {uploaded_file.id}")

    # Signed URL 얻기
    signed_url = client.files.get_signed_url(file_id=uploaded_file.id)

    # OCR 처리
    print("OCR 처리 중...")
    ocr_response = client.ocr.process(
        model="mistral-ocr-latest",
        document={
            "type": "document_url",
            "document_url": signed_url.url,
        },
        include_image_base64=include_images
    )

    # 결과 구성
    result = {
        "text": [],
        "images": [],
        "duration": time.time() - start_time
    }

    # OCR 응답에서 텍스트와 이미지 추출
    if hasattr(ocr_response, 'pages'):
        for i, page in enumerate(ocr_response.pages):
            page_num = i + 1

            # 페이지 텍스트 추출
            if hasattr(page, 'markdown'):
                result["text"].append({
                    "page": page_num,
                    "content": page.markdown
                })

            # 페이지 이미지 추출
            if include_images and hasattr(page, 'images'):
                for img in page.images:
                    if hasattr(img, 'id') and hasattr(img, 'image_base64'):
                        result["images"].append({
                            "page": page_num,
                            "id": img.id,
                            "base64": img.image_base64
                        })

    print(f"OCR 처리 완료. 페이지: {len(result['text'])}, 이미지: {len(result['images'])}")
    return result


# 이미지 저장 함수
def save_images(ocr_result, output_dir):
    """
    OCR 결과에서 이미지를 저장

    Args:
        ocr_result: OCR 처리 결과
        output_dir: 이미지 저장 디렉토리

    Returns:
        list: 저장된 이미지 경로 목록
    """
    if not ocr_result["images"]:
        return []

    # 이미지 저장 디렉토리 생성
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    saved_images = []

    for i, img_data in enumerate(ocr_result["images"]):
        page_num = img_data.get("page", 0)
        image_id = img_data.get("id", f"img_{i + 1}")
        base64_str = img_data.get("base64", "")

        # base64 데이터에서 접두사 제거
        if base64_str.startswith('data:'):
            base64_str = base64_str.split(',', 1)[1]

        try:
            # base64 디코딩
            img_bytes = base64.b64decode(base64_str)

            # 이미지 파일 저장
            img_filename = f"page{page_num}_img{i + 1}_{image_id}.png"
            img_path = os.path.join(output_dir, img_filename)

            with open(img_path, "wb") as f:
                f.write(img_bytes)

            saved_images.append(img_path)
            print(f"이미지 저장 완료: {img_path}")

        except Exception as e:
            print(f"이미지 저장 실패: {str(e)}")

    return saved_images


# 마크다운 저장 함수
def save_markdown(ocr_result, output_path):
    """
    OCR 결과를 마크다운 파일로 저장

    Args:
        ocr_result: OCR 처리 결과
        output_path: 출력 파일 경로

    Returns:
        str: 저장된 파일 경로
    """
    markdown_text = ""

    for page in ocr_result["text"]:
        page_num = page.get("page", 0)
        content = page.get("content", "")

        markdown_text += f"## 페이지 {page_num}\n\n{content}\n\n"

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(markdown_text)

    print(f"마크다운 파일 저장 완료: {output_path}")
    return output_path


# 도구 정의
tools = [
    {
        "type": "function",
        "function": {
            "name": "process_document",
            "description": "PDF 또는 이미지 파일을 OCR로 처리하여 텍스트 추출",
            "parameters": {
                "type": "object",
                "properties": {
                    "file_path": {
                        "type": "string",
                        "description": "처리할 PDF 또는 이미지 파일의 전체 경로"
                    },
                    "include_images": {
                        "type": "boolean",
                        "description": "이미지 추출 여부 (기본값: True)"
                    }
                },
                "required": ["file_path"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "save_images",
            "description": "OCR 결과에서 이미지를 추출하여 지정된 디렉토리에 저장",
            "parameters": {
                "type": "object",
                "properties": {
                    "ocr_result": {
                        "type": "object",
                        "description": "OCR 처리 결과"
                    },
                    "output_dir": {
                        "type": "string",
                        "description": "이미지를 저장할 디렉토리 경로"
                    }
                },
                "required": ["ocr_result", "output_dir"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "save_markdown",
            "description": "OCR 결과를 마크다운 파일로 저장",
            "parameters": {
                "type": "object",
                "properties": {
                    "ocr_result": {
                        "type": "object",
                        "description": "OCR 처리 결과"
                    },
                    "output_path": {
                        "type": "string",
                        "description": "저장할 마크다운 파일 경로"
                    }
                },
                "required": ["ocr_result", "output_path"]
            }
        }
    }
]

# 함수 매핑
names_to_functions = {
    "process_document": process_document,
    "save_images": save_images,
    "save_markdown": save_markdown
}

# 시스템 프롬프트
system = """
당신은 문서 처리 전문가입니다. 사용자가 OCR(광학 문자 인식)을 사용하여 PDF나 이미지에서 텍스트를 추출하는 것을 도와줍니다.
다음 도구를 사용할 수 있습니다:

1. process_document: PDF 또는 이미지 파일을 OCR로 처리하여 텍스트와 이미지 추출
2. save_images: OCR 결과에서 이미지를 추출하여 지정된 디렉토리에 저장
3. save_markdown: OCR 결과를 마크다운 파일로 저장

사용자의 요청에 따라 적절한 도구를 호출하여 문서 처리를 도와주세요.
처리 시간과 결과에 대한 요약 정보를 사용자에게 제공하세요.
"""

# 텍스트 모델 설정
text_model = "mistral-large-latest"

# 대화형 인터페이스
messages = [{"role": "system", "content": system}]

while True:
    # 사용자 입력, quit 입력 시 종료
    user_input = input("User > ")
    if user_input.lower() == "quit":
        break

    messages.append({"role": "user", "content": user_input})

    # 도구 호출 반복
    while True:
        response = client.chat.complete(
            model=text_model,
            messages=messages,
            temperature=0,
            tools=tools
        )

        assistant_message = {
            "role": "assistant",
            "content": response.choices[0].message.content
        }

        # 도구 호출이 있으면 추가
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            assistant_message["tool_calls"] = response.choices[0].message.tool_calls

        messages.append(assistant_message)

        # 도구 호출 처리
        if hasattr(response.choices[0].message, 'tool_calls') and response.choices[0].message.tool_calls:
            tool_call = response.choices[0].message.tool_calls[0]
            function_name = tool_call.function.name
            function_params = json.loads(tool_call.function.arguments)

            print(f"[도구 호출] {function_name}")
            function_result = names_to_functions[function_name](**function_params)

            messages.append({
                "role": "tool",
                "name": function_name,
                "content": json.dumps(function_result, ensure_ascii=False),
                "tool_call_id": tool_call.id
            })
        else:
            break

    print("Assistant >", response.choices[0].message.content)
